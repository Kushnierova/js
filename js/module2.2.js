// const add = function (a, b) {
//   console.log(`–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ—è add`);
//   console.log(a);
//   console.log(b);
//   console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –º–Ω–æ–∂–µ–Ω–Ω—è –¥–æ—Ä—ñ–≤–Ω—é—î: ${a * b}`);
//   return a + b;
// };

// const r1 = add(2, 3);
// console.log(`r1:`, r1);
// const r2 = add(5, 7);
// console.log(`r2:`, r2);
// const r3 = add(8, 3);
// console.log(`r3:`, r3);
//üü© ===============================================================================

// const fn = function (value) {
//   console.log(1);
//   console.log(2);
//   if (value < 50) {
//     return `–ú–µ–Ω—à–µ –Ω—ñ–∂ 50`;
//   }
//   return `–ë—ñ–ª—å—à–µ –Ω—ñ–∂ 50`;
// };
// console.log(fn(10));

// console.log(fn(100));

// const fnA = function () {
//   console.log(`–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ñ—É–Ω–∫—ñ—è A`);
// };

// const fnB = function () {
//   console.log(`–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ñ—É–Ω–∫—ñ—è B`);
// };
// const fnC = function () {
//   console.log(`–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ñ—É–Ω–∫—ñ—è C`);
// };

// fnA();
// fnB();
// fnC();
// üü©==============================================–ü–µ—Ä–µ–ø–∏—Å—É–≤–∞–Ω–Ω—è –∫–æ–¥—É –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
//üü©üîÑ–ó–ê–î–ê–ß–ê 1
//–ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –ø–æ–∫—É–ø–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω—ñ

// const calculateTotalPrice = function (items) {
//   console.log(items);

//   let total = 0;

//   for (let item of items) {
//     // console.log(item);
//     total += item;
//   }
//   return total;
// };

// console.log(calculateTotalPrice([54, 28, 105, 70, 92, 17, 124]));
// console.log(calculateTotalPrice([6, 28, 105, 35, 72, 17, 120]));
// console.log(calculateTotalPrice([54, 38, 108, 70, 92, 28, 130]));
//üü© =======================================================================================

// const logItems = function (items) {
//   for (const item of items) {
//     console.log(item);
//   }
// };
// logItems([`Mang0`, `Kiwi`, `Poly`, `Ajax`]);
// logItems([1, 2, 3, 4, 5]);
// logItems([`–∫—ñ—Ç`, `–ø–µ—Å`, `–∫—Ä–æ–ª–∏–∫`, `–ø–∞–ø—É–≥–∞`]);

// üü©=====================================================================================
// const logins = [`jnknkknk`, `kiwi`, `poly12345`, `nklnklnkj`];
// // –í–∞—Ä—ñ–∞–Ω—Ç 1
// // const loginFind = `poly12345`;

// // const message = logins.includes(loginFind)
// //   ? `–í—ñ—Ç–∞—î–º–æ, ${loginFind}`
// //   : `–ü—Ä–æ–±–∞—á—Ç–µ, —Ç–∞–∫–æ–≥–æ –ª–æ–≥—ñ–Ω—É —è–∫ ${loginFind} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`;

// // console.log(message);
// const findLogin = function (allLogins, loginFind) {
//   // –í–∞—Ä—ñ–∞–Ω—Ç 2
//   //   console.log(allLogins);

//   //   for (const login of logins) {
//   //     if (login === loginFind) {
//   //      return `–í—ñ—Ç–∞—î–º–æ, ${loginFind}`;
//   //     }
//   //   }
//   //   return `–ü—Ä–æ–±–∞—á—Ç–µ, —Ç–∞–∫–æ–≥–æ –ª–æ–≥—ñ–Ω—É —è–∫ ${loginFind} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`;
//   // –í–∞—Ä—ñ–∞–Ω—Ç 3
//   return allLogins.includes(loginFind)
//     ? `–í—ñ—Ç–∞—î–º–æ, ${loginFind}`
//     : `–ü—Ä–æ–±–∞—á—Ç–µ, —Ç–∞–∫–æ–≥–æ –ª–æ–≥—ñ–Ω—É —è–∫ ${loginFind} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`;
// };
// console.log(findLogin(logins, `avocado`));
// console.log(findLogin(logins, `orange`));
// console.log(findLogin(logins, `apple`));
// console.log(findLogin(logins, `kiwi`));

// üü©===================================================================================
// // üîÑ–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∞—Å–ª–∞ –≤ –º–∞—Å–∏–≤—ñ
// // –ø—Ä–∏ —É–º–æ–≤—ñ —â–æ –≤—Å—ñ —á–∏—Å–ª–∞ –≤ –º–∞—Å–∏–≤—ñ —Ä—ñ–∑–Ω—ñ  –Ω–µ –ø–æ–≤—Ç–æ—Ä—é—é—Ç—å—Å—è

// // console.log(smallestNumber);
// const findSmallesNumber = function (numbers) {
//   let smallestNumber = numbers[0];

//   for (const number of numbers) {
//     //   console.log(number);
//     if (number < smallestNumber) {
//       smallestNumber = number;
//     }
//   }
//   return smallestNumber;
// };

// console.log(findSmallesNumber([3, 8, 12, -2, 15]));
// console.log(findSmallesNumber([100, 54, 8, 12, 47]));
// console.log(findSmallesNumber([7, 21, 84, 15, 4]));

// //   üîÑ–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞
// const findBiggestNumber = function (numbers) {
//   let biggestNumber = numbers[0];

//   for (const number of numbers) {
//     if (number > biggestNumber) {
//       biggestNumber = number;
//     }
//   }
//   return biggestNumber;
// };
// console.log(findBiggestNumber([3, 8, 12, -2, 15]));
// console.log(findBiggestNumber([100, 54, 8, 12, 47]));
// console.log(findBiggestNumber([7, 21, 84, 15, 4]));

// üü©===================================================================================

// const changeCase = function (string) {

//   const letters = string.split(``);
//   let invertedString = ``;

//   for (const letter of letters) {
//     const isInLowerCase = letter === letter.toLowerCase();
//     invertedString += isInLowerCase ? letter.toUpperCase() : letter.toLowerCase();
//   }
//   return invertedString;
// };

// console.log(changeCase(`frghBUJKNhdf`));
// console.log(changeCase(`frGVJHBfhdf`));

// üü©===================================================================================
// // const title = `Top 10 benefits of React framework`;

// // const normalizedTitle = title.toLowerCase();
// // const words = normalizedTitle.split(` `);
// // const slug1 = words.join(`-`);

// // const slug1 = title.toLowerCase().split(` `).join(`-`);

// // console.log(slug1);

// const slugify = function (string) {
//   //   const normalizedString = string.toLowerCase();
//   //   const words = normalizedString.split(` `);
//   //   const slug1 = words.join(`-`);

//   return string.toLowerCase().split(` `).join(`-`);
// };

// console.log(slugify(`Top 10 benefits of React framework`));
// üü©===================================================================================
// // –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ arguments —ñ Array.from —ñ ...

// const fn = function () {
//   console.log(arguments);

//   // ‚ùó–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤(–Ω–µ –º–∞—î –≤—Å—ñ—Ö –º–µ—Ç–æ–¥—ñ–≤) –Ω–∞ –º–∞—Å–∏–≤
//   const args = Array.from(arguments);
//   console.log(args);
// //  ‚ùó –Ü —Ç–µ–ø–µ—Ä —É –º–∞—Å–∏–≤—É —î –≤—Å—ñ –º–µ—Ç–æ–¥–∏
// };

// fn(1, 2, 3);
// fn(5, 7, 8, 9);
// fn(7, 5, 4, 6, 10);
// ‚ùó–ê–ª–µ —Ü–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –º–µ—Ç–æ–¥, –¥–∞–ª—ñ –±—ñ–ª—å—à –Ω–æ–≤–∏–π
// üü©===================================================================================
// const fn = function (...args) {
//   console.log(args);
// };
// fn(1, 2, 3);
// fn(5, 7, 8, 9);
// fn(7, 5, 4, 6, 10);
//üü© ====================================================================================

// const fn = function (a, b, c, ...args) {
//   console.log(`${a} ${b} ${c}`);
//   console.log(args);
// };

// fn(`hello`, 1, 2, 3);
// fn(`aloha`, 1, 2, 3, 4);
// fn(`hi`, 1, 2, 3, 4, 5, 6);
// üü©===================================================================================
//üîÑ  –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±—É–¥—å —è–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤(—á–∏—Å–µ–ª)
// –û–ø–µ—Ä–∞—Ü—ñ—è ...(rest)
// const add = function (...args) {
//   console.log(args);
//   let total = 0;
//   for (const arg of args) {
//     total += arg;
//   }
//   return total;
// };

// console.log(add(1, 2, 3));
// console.log(add(1, 2, 3, 5, 6, 4, 7, 8));
//üü© ===========================================================================

//üîÑ –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é filterNumbers(array [,number1,...]) —è–∫–∞:
// -–ø–µ—Ä—à–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª;
// -–ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω–∞
// –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—à–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —è–∫—ñ –±—É–¥—É—Ç—å —á–∏—Å–ª–∞–º–∏;
// -–§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤–ë –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç—ñ
// –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –¥—Ä—É–≥–æ–≥–æ –¥–ª—è —è–∫–æ–≥–æ —î –∞–Ω–∞–ª–æ–≥ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –º–∞—Å–∏–≤—ñ.

// const filterNumbers = function (array, ...args) {
//   //   console.log(`array:`, array);
//   //   console.log(`args:`, args);

//   const uniqueElements = [];

//   for (const element of array) {
//     // console.log(element);
//     // console.log(args.includes(element));

//     if (args.includes(element)) {
//       //   console.log(`${element} —î –≤ –æ–±–æ—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö —Ñ—É–Ω–∫—Ü—ñ—ó`);
//       uniqueElements.push(element);
//     }
//   }
//   return uniqueElements;
// };

// console.log(filterNumbers([1, 2, 3, 4, 5], 10, 15, 2, 3, 8));
// console.log(filterNumbers([10, 15, 25, 30], 23, 30, 18, 15));
// console.log(filterNumbers([100, 200, 300, 400, 500], 7, 12, 200, 64));

//üü© ===============================================================================
//üîÑ –¢–∞–∫–∞ –∂ —Ñ—É–Ω–∫—Ü—ñ—è, –∞–ª–µ –Ω–∞ –ø–æ—à—É–∫ —Å–ª—ñ–≤, –≤–∏–±—Ä–∞—Ç–∏ –µ–∫—Ä–∞–Ω—ñ–∑–æ–≤–∞–Ω—ñ –∫–Ω–∏–≥–∏
// const filterWords = function (array, ...args) {
//   const uniquElements = [];

//   for (const element of array) {
//     if (args.includes(element)) {
//       uniquElements.push(element);
//     }
//   }
//   return uniquElements;
// };
// console.log(
//   filterWords(
//     ["–í—ñ–¥—å–º–∞–∫", "–í–æ–ª–æ–¥–∞—Ä –ø–µ—Ä—Å–Ω—ñ–≤", "–ì–æ–±—ñ—Ç"],
//     "–í—ñ–¥—å–º–∞–∫",
//     "–í–æ–ª–æ–¥–∞—Ä –ø–µ—Ä—Å–Ω—ñ–≤",
//     "–ì–æ–±—ñ—Ç",
//     "–î—Ä—É–∑—ñ"
//   )
// );
// console.log(
//   filterWords(
//     ["–ü—Ä–æ–∫–ª—è—Ç–∞", "–í–æ–ª–æ–¥–∞—Ä –ø–µ—Ä—Å–Ω—ñ–≤"],
//     "–ü—Ä–æ–∫–ª—è—Ç–∞",
//     "–í–æ–ª–æ–¥–∞—Ä –ø–µ—Ä—Å–Ω—ñ–≤",
//     "–Ø–∫ —è –∑—É—Å—Ç—Ä—ñ–≤ –≤–∞—à—É –º–∞–º—É",
//     "–î—Ä—É–∑—ñ"
//   )
// );
// console.log(
//   filterWords(
//     ["–°–æ–ª—è—Ä—ñ—Å", "–°—ñ–ª—å–º–∞—Ä—ñ–ª—ñ–æ–Ω", "–ú–∏—Å—Ç–µ—Ç—Å—Ç–≤–æ –ª—é–±–∏—Ç–∏", "–ë—É—Ç–∏ —á–∏ –º–∞—Ç–∏"],
//     "–°–æ–ª—è—Ä—ñ—Å",
//     "–û—Å—Ç—Ä—ñ–≤ –ø—Ä–æ–∫–ª—è—Ç–∏—Ö"
//   )
// );
//üü© =============================================================================

